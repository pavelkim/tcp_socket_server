name: Go

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.12
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Get dependencies
      run: |
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi

    - name: Read out .version file
      id: readversionfile
      run: echo "::set-output name=desiredversion::$(cat .version)"

    - name: Verify version
      run: echo "${{steps.readversionfile.outputs.desiredversion}}"

    - name: Get current timestamp
      id: timestamp
      run: echo "::set-output name=timestamp::$(date +'%FT%TZ')"

    - name: Build
      run: go build -ldflags="-X 'main.BuildVersion=${{steps.readversionfile.outputs.desiredversion}}'" -v .

    - name: Verify binary file
      run: md5sum tcp_socket_server

    - name: Test
      run: go test -v .

    - name: Create a new tag
      run: |
        curl --request POST --url https://api.github.com/repos/${{ github.repository }}/git/tags \
        -H 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
        -H 'content-type: application/json' \
        --data '{"tag": "${{steps.readversionfile.outputs.desiredversion}}",
          "message": "Pipeline build tag",
          "object": "${{ github.sha }}",
          "type": "commit",
          "tagger": {
            "name": "Alice from Wonderland",
            "email": "noreply@localhost.localdomain",
            "date": "${{steps.timestamp.outputs.timestamp}}"
          }'

    - name: Create a Release
      id: create_release
      uses: actions/create-release@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{steps.readversionfile.outputs.desiredversion}}
        release_name: Release ${{steps.readversionfile.outputs.desiredversion}}
        body: Automatically generated release
        draft: true
        prerelease: false

    - name: Upload a Release Asset
      uses: actions/upload-release-asset@v1.0.2
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./tcp_socket_server
        asset_name: tcp_socket_server
        asset_content_type: application/octet-stream
